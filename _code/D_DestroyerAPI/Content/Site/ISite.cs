#region

using System;
using AICPA.Destroyer.Content.Book;
using AICPA.Destroyer.Content.Document;
using AICPA.Destroyer.Shared;
using AICPA.Destroyer.User;

#endregion

namespace AICPA.Destroyer.Content.Site
{
    /// <summary>
    ///   Interface that exposes properties and methods for creating, 
    ///   managing, and saving a Site object.
    /// </summary>
    public interface ISite : ITocNode
    {
        #region Properties

        /// <summary>
        ///   The current user object. Contains null if the site was created outside of the context of a user.
        /// </summary>
        IUser User { get; }

        /// <summary>
        ///   The internal id of a site. This value is generated by the system and is read-only.
        /// </summary>
        int Id { get; }

        /// <summary>
        ///   The version of the site. This value is generated by the system and is read-only.
        /// </summary>
        int Version { get; }

        /// <summary>
        ///   The name of the site.
        /// </summary>
        new string Name { get; set; }

        /// <summary>
        ///   The descriptive title of the site.
        /// </summary>
        new string Title { get; set; }

        /// <summary>
        ///   The books associated with the site. The books contained in this collection are represented in the order they appear in the table of contents.
        /// </summary>
        IBookCollection Books { get; set; }

        /// <summary>
        ///   The current status of the site.
        /// </summary>
        SiteStatus Status { get; set; }

        /// <summary>
        ///   The current status of the site.
        /// </summary>
        SiteStatus RequestedStatus { get; set; }

        /// <summary>
        ///   The online state of the site.
        /// </summary>
        bool Online { get; set; }

        /// <summary>
        ///   The site description. This is a paragraph-length description of the site and its contents.
        /// </summary>
        string Description { get; set; }

        /// <summary>
        ///   The base URI to use for searching the site
        /// </summary>
        string SearchUri { get; set; }

        /// <summary>
        ///   The the index associated with the site for providing indexing and search functionality.
        /// </summary>
        ISiteIndex SiteIndex { get; }

        /// <summary>
        ///   Xml string representing a template that describes the structure of the site.
        /// </summary>
        string SiteTemplateXml { get; set; }

        /// <summary>
        ///   Xml string describing the structure of the site
        /// </summary>
        string SiteXml { get; }

        /// <summary>
        ///   Xml string describing the structure of the site and all books contained in the site
        /// </summary>
        string SiteBookXml { get; }

        /// <summary>
        ///   Indicates whether or not the site has pending changes that need to be committed
        /// </summary>
        bool HasChanges { get; }

        /// <summary>
        ///   Indicates whether or not the site has been archived.
        /// </summary>
        bool Archived { get; set; }

        /// <summary>
        ///   Indicates build state for a site
        /// </summary>
        SiteBuildStatus BuildStatus { get; set; }

        /// <summary>
        ///   Indicates build state for the site's index
        /// </summary>
        SiteIndexBuildStatus IndexBuildStatus { get; set; }

        #endregion Properties

        #region Methods

        /// <summary>
        ///   Commits all changes to a site to the database
        /// </summary>
        void Save();

        /// <summary>
        ///   Locates the document that follows the specified document. ToC order is used to determine the next document.
        /// </summary>
        /// <param name = "contextDocument">The context document to use for finding the next document</param>
        /// <returns>An interface for accessing the next document, or null if no next document is found.</returns>
        IDocument GetNextDocument(IDocument contextDocument);

        /// <summary>
        ///   Locates the document that precedes the specified document. ToC order is used to determine the previous document.
        /// </summary>
        /// <param name = "contextDocument">The context document to use for finding the previous document</param>
        /// <returns>An interface for accessing the previous document, or null if no previous document is found.</returns>
        IDocument GetPreviousDocument(IDocument contextDocument);

        /// <summary>
        ///   Locates the book that follows the specified book. ToC order is used to determine the next book.
        /// </summary>
        /// <param name = "contextBook">The context book to use for finding the next book</param>
        /// <returns>An interface for accessing the next book, or null if no next book is found.</returns>
        IBook GetNextBook(IBook contextBook);

        /// <summary>
        ///   Locates the book that precedes the specified book. ToC order is used to determine the previous book.
        /// </summary>
        /// <param name = "contextBook">The context book to use for finding the previous book</param>
        /// <returns>An interface for accessing the previous book, or null if no previous book is found.</returns>
        IBook GetPreviousBook(IBook contextBook);

        /// <summary>
        ///   Adds a book to the site
        /// </summary>
        /// <param name = "book">The book you wish to add to the site. The book is added to the bottom of the site's hierarchy.</param>
        void AddBook(IBook book);

        /// <summary>
        ///   Removes a book from the site
        /// </summary>
        /// <param name = "book">The book you wish to remove from the site.</param>
        void RemoveBook(IBook book);

        /// <summary>
        ///   Retrieves an XML string describing the specified node and its immediate children.
        /// </summary>
        /// <param name = "nodeId">The id of the node you wish to retrieve.</param>
        /// <param name = "nodeType">The type of node you wish to retrieve.</param>
        /// <returns></returns>
        string GetTocXml(int nodeId, NodeType nodeType, bool ignoreAnchors);

        string GetTocXml(int nodeId, NodeType nodeType);

        /// <summary>
        ///   Builds or updates a site's table of contents
        /// </summary>
        void Build();

        /// <summary>
        ///   Gets Alternate Book for a given convination of Book,Target Pointer and User Site
        /// </summary>
        string AlternateBook(string targetPtr, string targetDoc, string siteDomain);

        /// <summary>
        ///   Gets the collection of unique Topics from the original standards before Codification.
        /// </summary>
        /// <returns>String array containing the names of the original Standard Types.</returns>
        string[] GetXRefSectionsByTopicSubtopic(string Topic, string SubTopic);

        /// <summary>
        ///   Gets the collection of unique Subtopics of a topic
        /// </summary>
        /// <returns>String array containing the names of the SubTopics.</returns>
        string[] GetXRefSubtopicsByTopic(string Topic);

        /// <summary>
        ///   Gets the collection of unique Subtopics of a topic
        /// </summary>
        /// <returns>String array containing the names of the SubTopics.</returns>
        string[] GetXRefTopics();

        /// <summary>
        ///   Gets the collection of unique Topics from the original standards before Codification.
        /// </summary>
        /// <returns>String array containing the names of the original Standard Types.</returns>
        string[] GetXRefStandardTypes();

        /// <summary>
        ///   Gets the collection of unique Standard Numbers for a specified Standard Type from the original standards before Codification.
        /// </summary>
        /// <param name = "standardType">Standard Type in which to filter Standard Numbers on.</param>
        /// <returns>String array containing the Standard Numbers for the specified Standard Type.</returns>
        string[] GetXRefStandardNumbersForStandardType(string standardType);

        /// <summary>
        ///   Performs the search result for Codification entries for a specified Standard Type and Standard Number from the original standards before Codification.
        /// </summary>
        /// <param name = "standardType">Standard Type in which to filter on in searching for cross-referenced Codification entires.</param>
        /// <param name = "standardNum">Standard Number in which to filter on in searching for cross-referenced Codification entries.</param>
        /// <returns>Cross Reference search results in the form of XRefRow entries as declared in the SiteDS data set.</returns>
        SiteDs.XRefRow[] GetXRefCodByStandard(string standardType, string standardNum);

        /// <summary>
        ///   Performs the search result for Codification entries for a specified Topic,Subtopic and section
        /// </summary>
        /// <param name = "topic">Codification Topic</param>
        /// <param name = "subtopic">Codification SubTopic</param>
        /// <param name = "section">Codification Section</param>
        /// <returns>Cross Reference search results in the form of XRefRow entries as declared in the SiteDS data set.</returns>
        SiteDs.XRefRow[] GetXRefStandardByCod(string topic, string subtopic, string section);

        /// <summary>
        /// Gets the S join topics.	
        /// </summary>
        /// <returns></returns>
        /// <remarks></remarks>
        SiteDs.Cod_MetaRow[] GetSJoinTopics();
        /// <summary>
        /// Gets the S join docs by topic section.	
        /// </summary>
        /// <param name="topicNum">The topic num.</param>
        /// <param name="sectionNum">The section num.</param>
        /// <param name="intersection">The intersection.</param>
        /// <returns></returns>
        /// <remarks></remarks>
        SiteDs.Cod_MetaRow[] GetSJoinDocsByTopicSection(string topicNum, String sectionNum, int intersection);
        /// <summary>
        /// Gets the S join sections by topic.	
        /// </summary>
        /// <param name="topicNum">The topic num.</param>
        /// <param name="intersection">The intersection.</param>
        /// <param name="sec">The sec.</param>
        /// <returns></returns>
        /// <remarks></remarks>
        SiteDs.Cod_MetaRow[] GetSJoinSectionsByTopic(string topicNum, int intersection, int sec);
        /// <summary>
        /// Gets the subtopic by topic.	
        /// </summary>
        /// <param name="topicNum">The topic num.</param>
        /// <returns></returns>
        /// <remarks></remarks>
        SiteDs.Cod_MetaRow[] GetSubtopicByTopic(string topicNum);
        /// <summary>
        /// Gets the section by topic subtopic.	
        /// </summary>
        /// <param name="topicNum">The topic num.</param>
        /// <param name="subtopicNum">The subtopic num.</param>
        /// <returns></returns>
        /// <remarks></remarks>
        SiteDs.Cod_MetaRow[] GetSectionByTopicSubtopic(string topicNum, string subtopicNum);

        /// <summary>
        /// Gets the archive list.	
        /// </summary>
        /// <returns></returns>
        /// <remarks></remarks>
        string getArchiveList();

        /// <summary>
        /// Gets the reference link list.	
        /// </summary>
        /// <returns></returns>
        /// <remarks></remarks>
        string getReferenceLinkList();

        /// <summary>
        /// Gets the X ref list.	
        /// </summary>
        /// <returns></returns>
        /// <remarks></remarks>
        string getXRefList();

        /// <summary>
        /// Gets the J section list.	
        /// </summary>
        /// <returns></returns>
        /// <remarks></remarks>
        string getJSectionList();

        #endregion Methods
    }
}